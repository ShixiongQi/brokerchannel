/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cowbon/brokerchannel/pkg/apis/samples/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BrokerChannelLister helps list BrokerChannels.
// All objects returned here must be treated as read-only.
type BrokerChannelLister interface {
	// List lists all BrokerChannels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BrokerChannel, err error)
	// BrokerChannels returns an object that can list and get BrokerChannels.
	BrokerChannels(namespace string) BrokerChannelNamespaceLister
	BrokerChannelListerExpansion
}

// brokerChannelLister implements the BrokerChannelLister interface.
type brokerChannelLister struct {
	indexer cache.Indexer
}

// NewBrokerChannelLister returns a new BrokerChannelLister.
func NewBrokerChannelLister(indexer cache.Indexer) BrokerChannelLister {
	return &brokerChannelLister{indexer: indexer}
}

// List lists all BrokerChannels in the indexer.
func (s *brokerChannelLister) List(selector labels.Selector) (ret []*v1alpha1.BrokerChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BrokerChannel))
	})
	return ret, err
}

// BrokerChannels returns an object that can list and get BrokerChannels.
func (s *brokerChannelLister) BrokerChannels(namespace string) BrokerChannelNamespaceLister {
	return brokerChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BrokerChannelNamespaceLister helps list and get BrokerChannels.
// All objects returned here must be treated as read-only.
type BrokerChannelNamespaceLister interface {
	// List lists all BrokerChannels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BrokerChannel, err error)
	// Get retrieves the BrokerChannel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BrokerChannel, error)
	BrokerChannelNamespaceListerExpansion
}

// brokerChannelNamespaceLister implements the BrokerChannelNamespaceLister
// interface.
type brokerChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BrokerChannels in the indexer for a given namespace.
func (s brokerChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BrokerChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BrokerChannel))
	})
	return ret, err
}

// Get retrieves the BrokerChannel from the indexer for a given namespace and name.
func (s brokerChannelNamespaceLister) Get(name string) (*v1alpha1.BrokerChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("brokerchannel"), name)
	}
	return obj.(*v1alpha1.BrokerChannel), nil
}
